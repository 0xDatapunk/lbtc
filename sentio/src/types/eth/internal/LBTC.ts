/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "./common.js";

export interface LBTCInterface extends Interface {}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: bigint;
}
export type ApprovalEvent = TypedEvent<
  [string, string, bigint],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BasculeChangedEventObject {
  prevVal: string;
  newVal: string;
}
export type BasculeChangedEvent = TypedEvent<
  [string, string],
  BasculeChangedEventObject
>;

export type BasculeChangedEventFilter = TypedEventFilter<BasculeChangedEvent>;

export interface BatchMintSkippedEventObject {
  payloadHash: string;
  payload: string;
}
export type BatchMintSkippedEvent = TypedEvent<
  [string, string],
  BatchMintSkippedEventObject
>;

export type BatchMintSkippedEventFilter =
  TypedEventFilter<BatchMintSkippedEvent>;

export interface BridgeChangedEventObject {
  prevVal: string;
  newVal: string;
}
export type BridgeChangedEvent = TypedEvent<
  [string, string],
  BridgeChangedEventObject
>;

export type BridgeChangedEventFilter = TypedEventFilter<BridgeChangedEvent>;

export interface BurnCommissionChangedEventObject {
  prevValue: bigint;
  newValue: bigint;
}
export type BurnCommissionChangedEvent = TypedEvent<
  [bigint, bigint],
  BurnCommissionChangedEventObject
>;

export type BurnCommissionChangedEventFilter =
  TypedEventFilter<BurnCommissionChangedEvent>;

export interface ClaimerUpdatedEventObject {
  claimer: string;
  isClaimer: boolean;
}
export type ClaimerUpdatedEvent = TypedEvent<
  [string, boolean],
  ClaimerUpdatedEventObject
>;

export type ClaimerUpdatedEventFilter = TypedEventFilter<ClaimerUpdatedEvent>;

export interface ConsortiumChangedEventObject {
  prevVal: string;
  newVal: string;
}
export type ConsortiumChangedEvent = TypedEvent<
  [string, string],
  ConsortiumChangedEventObject
>;

export type ConsortiumChangedEventFilter =
  TypedEventFilter<ConsortiumChangedEvent>;

export interface DustFeeRateChangedEventObject {
  oldRate: bigint;
  newRate: bigint;
}
export type DustFeeRateChangedEvent = TypedEvent<
  [bigint, bigint],
  DustFeeRateChangedEventObject
>;

export type DustFeeRateChangedEventFilter =
  TypedEventFilter<DustFeeRateChangedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface FeeChangedEventObject {
  oldFee: bigint;
  newFee: bigint;
}
export type FeeChangedEvent = TypedEvent<
  [bigint, bigint],
  FeeChangedEventObject
>;

export type FeeChangedEventFilter = TypedEventFilter<FeeChangedEvent>;

export interface FeeChargedEventObject {
  fee: bigint;
  userSignature: string;
}
export type FeeChargedEvent = TypedEvent<
  [bigint, string],
  FeeChargedEventObject
>;

export type FeeChargedEventFilter = TypedEventFilter<FeeChargedEvent>;

export interface InitializedEventObject {
  version: bigint;
}
export type InitializedEvent = TypedEvent<[bigint], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintProofConsumedEventObject {
  recipient: string;
  payloadHash: string;
  payload: string;
}
export type MintProofConsumedEvent = TypedEvent<
  [string, string, string],
  MintProofConsumedEventObject
>;

export type MintProofConsumedEventFilter =
  TypedEventFilter<MintProofConsumedEvent>;

export interface MinterUpdatedEventObject {
  minter: string;
  isMinter: boolean;
}
export type MinterUpdatedEvent = TypedEvent<
  [string, boolean],
  MinterUpdatedEventObject
>;

export type MinterUpdatedEventFilter = TypedEventFilter<MinterUpdatedEvent>;

export interface NameAndSymbolChangedEventObject {
  name: string;
  symbol: string;
}
export type NameAndSymbolChangedEvent = TypedEvent<
  [string, string],
  NameAndSymbolChangedEventObject
>;

export type NameAndSymbolChangedEventFilter =
  TypedEventFilter<NameAndSymbolChangedEvent>;

export interface OperatorRoleTransferredEventObject {
  previousOperator: string;
  newOperator: string;
}
export type OperatorRoleTransferredEvent = TypedEvent<
  [string, string],
  OperatorRoleTransferredEventObject
>;

export type OperatorRoleTransferredEventFilter =
  TypedEventFilter<OperatorRoleTransferredEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserRoleTransferredEventObject {
  previousPauser: string;
  newPauser: string;
}
export type PauserRoleTransferredEvent = TypedEvent<
  [string, string],
  PauserRoleTransferredEventObject
>;

export type PauserRoleTransferredEventFilter =
  TypedEventFilter<PauserRoleTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: bigint;
}
export type TransferEvent = TypedEvent<
  [string, string, bigint],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TreasuryAddressChangedEventObject {
  prevValue: string;
  newValue: string;
}
export type TreasuryAddressChangedEvent = TypedEvent<
  [string, string],
  TreasuryAddressChangedEventObject
>;

export type TreasuryAddressChangedEventFilter =
  TypedEventFilter<TreasuryAddressChangedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeRequestEventObject {
  fromAddress: string;
  scriptPubKey: string;
  amount: bigint;
}
export type UnstakeRequestEvent = TypedEvent<
  [string, string, bigint],
  UnstakeRequestEventObject
>;

export type UnstakeRequestEventFilter = TypedEventFilter<UnstakeRequestEvent>;

export interface WithdrawalsEnabledEventObject {
  arg0: boolean;
}
export type WithdrawalsEnabledEvent = TypedEvent<
  [boolean],
  WithdrawalsEnabledEventObject
>;

export type WithdrawalsEnabledEventFilter =
  TypedEventFilter<WithdrawalsEnabledEvent>;

export interface LBTC extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: LBTCInterface;
}
