/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides, BytesLike } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { LBTC__factory } from "./index.js";
import {
  LBTC,
  ApprovalEvent,
  ApprovalEventFilter,
  BasculeChangedEvent,
  BasculeChangedEventFilter,
  BatchMintSkippedEvent,
  BatchMintSkippedEventFilter,
  BridgeChangedEvent,
  BridgeChangedEventFilter,
  BurnCommissionChangedEvent,
  BurnCommissionChangedEventFilter,
  ClaimerUpdatedEvent,
  ClaimerUpdatedEventFilter,
  ConsortiumChangedEvent,
  ConsortiumChangedEventFilter,
  DustFeeRateChangedEvent,
  DustFeeRateChangedEventFilter,
  EIP712DomainChangedEvent,
  EIP712DomainChangedEventFilter,
  FeeChangedEvent,
  FeeChangedEventFilter,
  FeeChargedEvent,
  FeeChargedEventFilter,
  InitializedEvent,
  InitializedEventFilter,
  MintProofConsumedEvent,
  MintProofConsumedEventFilter,
  MinterUpdatedEvent,
  MinterUpdatedEventFilter,
  NameAndSymbolChangedEvent,
  NameAndSymbolChangedEventFilter,
  OperatorRoleTransferredEvent,
  OperatorRoleTransferredEventFilter,
  OwnershipTransferStartedEvent,
  OwnershipTransferStartedEventFilter,
  OwnershipTransferredEvent,
  OwnershipTransferredEventFilter,
  PausedEvent,
  PausedEventFilter,
  PauserRoleTransferredEvent,
  PauserRoleTransferredEventFilter,
  TransferEvent,
  TransferEventFilter,
  TreasuryAddressChangedEvent,
  TreasuryAddressChangedEventFilter,
  UnpausedEvent,
  UnpausedEventFilter,
  UnstakeRequestEvent,
  UnstakeRequestEventFilter,
  WithdrawalsEnabledEvent,
  WithdrawalsEnabledEventFilter,
} from "./LBTC.js";

export interface BasculeCallObject {}

export type BasculeCallTrace = TypedCallTrace<[], BasculeCallObject>;

export interface DOMAIN_SEPARATORCallObject {}

export type DOMAIN_SEPARATORCallTrace = TypedCallTrace<
  [],
  DOMAIN_SEPARATORCallObject
>;

export interface AcceptOwnershipCallObject {}

export type AcceptOwnershipCallTrace = TypedCallTrace<
  [],
  AcceptOwnershipCallObject
>;

export interface AddClaimerCallObject {
  newClaimer: string;
}

export type AddClaimerCallTrace = TypedCallTrace<
  [string],
  AddClaimerCallObject
>;

export interface AddMinterCallObject {
  newMinter: string;
}

export type AddMinterCallTrace = TypedCallTrace<[string], AddMinterCallObject>;

export interface AllowanceCallObject {
  owner: string;
  spender: string;
}

export type AllowanceCallTrace = TypedCallTrace<
  [string, string],
  AllowanceCallObject
>;

export interface ApproveCallObject {
  spender: string;
  value: bigint;
}

export type ApproveCallTrace = TypedCallTrace<
  [string, bigint],
  ApproveCallObject
>;

export interface BalanceOfCallObject {
  account: string;
}

export type BalanceOfCallTrace = TypedCallTrace<[string], BalanceOfCallObject>;

export interface BatchMint_address_array_uint256_arrayCallObject {
  to: string[];
  amount: bigint[];
}

export type BatchMint_address_array_uint256_arrayCallTrace = TypedCallTrace<
  [string[], bigint[]],
  BatchMint_address_array_uint256_arrayCallObject
>;

export interface BatchMint_bytes_array_bytes_arrayCallObject {
  payload: string[];
  proof: string[];
}

export type BatchMint_bytes_array_bytes_arrayCallTrace = TypedCallTrace<
  [string[], string[]],
  BatchMint_bytes_array_bytes_arrayCallObject
>;

export interface BatchMintWithFeeCallObject {
  mintPayload: string[];
  proof: string[];
  feePayload: string[];
  userSignature: string[];
}

export type BatchMintWithFeeCallTrace = TypedCallTrace<
  [string[], string[], string[], string[]],
  BatchMintWithFeeCallObject
>;

export interface Burn_uint256CallObject {
  amount: bigint;
}

export type Burn_uint256CallTrace = TypedCallTrace<
  [bigint],
  Burn_uint256CallObject
>;

export interface Burn_address_uint256CallObject {
  from: string;
  amount: bigint;
}

export type Burn_address_uint256CallTrace = TypedCallTrace<
  [string, bigint],
  Burn_address_uint256CallObject
>;

export interface CalcUnstakeRequestAmountCallObject {
  scriptPubkey: string;
  amount: bigint;
}

export type CalcUnstakeRequestAmountCallTrace = TypedCallTrace<
  [string, bigint],
  CalcUnstakeRequestAmountCallObject
>;

export interface ChangeBasculeCallObject {
  newVal: string;
}

export type ChangeBasculeCallTrace = TypedCallTrace<
  [string],
  ChangeBasculeCallObject
>;

export interface ChangeBurnCommissionCallObject {
  newValue: bigint;
}

export type ChangeBurnCommissionCallTrace = TypedCallTrace<
  [bigint],
  ChangeBurnCommissionCallObject
>;

export interface ChangeConsortiumCallObject {
  newVal: string;
}

export type ChangeConsortiumCallTrace = TypedCallTrace<
  [string],
  ChangeConsortiumCallObject
>;

export interface ChangeDustFeeRateCallObject {
  newRate: bigint;
}

export type ChangeDustFeeRateCallTrace = TypedCallTrace<
  [bigint],
  ChangeDustFeeRateCallObject
>;

export interface ChangeNameAndSymbolCallObject {
  name_: string;
  symbol_: string;
}

export type ChangeNameAndSymbolCallTrace = TypedCallTrace<
  [string, string],
  ChangeNameAndSymbolCallObject
>;

export interface ChangeTreasuryAddressCallObject {
  newValue: string;
}

export type ChangeTreasuryAddressCallTrace = TypedCallTrace<
  [string],
  ChangeTreasuryAddressCallObject
>;

export interface ConsortiumCallObject {}

export type ConsortiumCallTrace = TypedCallTrace<[], ConsortiumCallObject>;

export interface DecimalsCallObject {}

export type DecimalsCallTrace = TypedCallTrace<[], DecimalsCallObject>;

export interface Eip712DomainCallObject {}

export type Eip712DomainCallTrace = TypedCallTrace<[], Eip712DomainCallObject>;

export interface GetBurnCommissionCallObject {}

export type GetBurnCommissionCallTrace = TypedCallTrace<
  [],
  GetBurnCommissionCallObject
>;

export interface GetDustFeeRateCallObject {}

export type GetDustFeeRateCallTrace = TypedCallTrace<
  [],
  GetDustFeeRateCallObject
>;

export interface GetMintFeeCallObject {}

export type GetMintFeeCallTrace = TypedCallTrace<[], GetMintFeeCallObject>;

export interface GetTreasuryCallObject {}

export type GetTreasuryCallTrace = TypedCallTrace<[], GetTreasuryCallObject>;

export interface InitializeCallObject {
  consortium_: string;
  burnCommission_: bigint;
  treasury: string;
  owner_: string;
}

export type InitializeCallTrace = TypedCallTrace<
  [string, bigint, string, string],
  InitializeCallObject
>;

export interface IsClaimerCallObject {
  claimer: string;
}

export type IsClaimerCallTrace = TypedCallTrace<[string], IsClaimerCallObject>;

export interface IsMinterCallObject {
  minter: string;
}

export type IsMinterCallTrace = TypedCallTrace<[string], IsMinterCallObject>;

export interface Mint_address_uint256CallObject {
  to: string;
  amount: bigint;
}

export type Mint_address_uint256CallTrace = TypedCallTrace<
  [string, bigint],
  Mint_address_uint256CallObject
>;

export interface Mint_bytes_bytesCallObject {
  payload: string;
  proof: string;
}

export type Mint_bytes_bytesCallTrace = TypedCallTrace<
  [string, string],
  Mint_bytes_bytesCallObject
>;

export interface MintWithFeeCallObject {
  mintPayload: string;
  proof: string;
  feePayload: string;
  userSignature: string;
}

export type MintWithFeeCallTrace = TypedCallTrace<
  [string, string, string, string],
  MintWithFeeCallObject
>;

export interface NameCallObject {}

export type NameCallTrace = TypedCallTrace<[], NameCallObject>;

export interface NoncesCallObject {
  owner: string;
}

export type NoncesCallTrace = TypedCallTrace<[string], NoncesCallObject>;

export interface OperatorCallObject {}

export type OperatorCallTrace = TypedCallTrace<[], OperatorCallObject>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface PauseCallObject {}

export type PauseCallTrace = TypedCallTrace<[], PauseCallObject>;

export interface PausedCallObject {}

export type PausedCallTrace = TypedCallTrace<[], PausedCallObject>;

export interface PauserCallObject {}

export type PauserCallTrace = TypedCallTrace<[], PauserCallObject>;

export interface PendingOwnerCallObject {}

export type PendingOwnerCallTrace = TypedCallTrace<[], PendingOwnerCallObject>;

export interface PermitCallObject {
  owner: string;
  spender: string;
  value: bigint;
  deadline: bigint;
  v: bigint;
  r: string;
  s: string;
}

export type PermitCallTrace = TypedCallTrace<
  [string, string, bigint, bigint, bigint, string, string],
  PermitCallObject
>;

export interface RedeemCallObject {
  scriptPubkey: string;
  amount: bigint;
}

export type RedeemCallTrace = TypedCallTrace<
  [string, bigint],
  RedeemCallObject
>;

export interface ReinitializeCallObject {}

export type ReinitializeCallTrace = TypedCallTrace<[], ReinitializeCallObject>;

export interface RemoveClaimerCallObject {
  oldClaimer: string;
}

export type RemoveClaimerCallTrace = TypedCallTrace<
  [string],
  RemoveClaimerCallObject
>;

export interface RemoveMinterCallObject {
  oldMinter: string;
}

export type RemoveMinterCallTrace = TypedCallTrace<
  [string],
  RemoveMinterCallObject
>;

export interface RenounceOwnershipCallObject {}

export type RenounceOwnershipCallTrace = TypedCallTrace<
  [],
  RenounceOwnershipCallObject
>;

export interface SetMintFeeCallObject {
  fee: bigint;
}

export type SetMintFeeCallTrace = TypedCallTrace<
  [bigint],
  SetMintFeeCallObject
>;

export interface SymbolCallObject {}

export type SymbolCallTrace = TypedCallTrace<[], SymbolCallObject>;

export interface ToggleWithdrawalsCallObject {}

export type ToggleWithdrawalsCallTrace = TypedCallTrace<
  [],
  ToggleWithdrawalsCallObject
>;

export interface TotalSupplyCallObject {}

export type TotalSupplyCallTrace = TypedCallTrace<[], TotalSupplyCallObject>;

export interface TransferCallObject {
  to: string;
  value: bigint;
}

export type TransferCallTrace = TypedCallTrace<
  [string, bigint],
  TransferCallObject
>;

export interface TransferFromCallObject {
  from: string;
  to: string;
  value: bigint;
}

export type TransferFromCallTrace = TypedCallTrace<
  [string, string, bigint],
  TransferFromCallObject
>;

export interface TransferOperatorRoleCallObject {
  newOperator: string;
}

export type TransferOperatorRoleCallTrace = TypedCallTrace<
  [string],
  TransferOperatorRoleCallObject
>;

export interface TransferOwnershipCallObject {
  newOwner: string;
}

export type TransferOwnershipCallTrace = TypedCallTrace<
  [string],
  TransferOwnershipCallObject
>;

export interface TransferPauserRoleCallObject {
  newPauser: string;
}

export type TransferPauserRoleCallTrace = TypedCallTrace<
  [string],
  TransferPauserRoleCallObject
>;

export interface UnpauseCallObject {}

export type UnpauseCallTrace = TypedCallTrace<[], UnpauseCallObject>;

const templateContract = LBTC__factory.connect("0x0", DummyProvider);

export class LBTCContractView extends ContractView<LBTC> {
  constructor(contract: LBTC) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async Bascule(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("Bascule()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async DOMAIN_SEPARATOR(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("DOMAIN_SEPARATOR()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async allowance(
    owner: string,
    spender: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("allowance(address,address)")(
        owner,
        spender,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async balanceOf(
    account: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("balanceOf(address)")(
        account,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async calcUnstakeRequestAmount(
    scriptPubkey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<
    [bigint, boolean] & { amountAfterFee: bigint; isAboveDust: boolean }
  > {
    try {
      return await this.contract.getFunction(
        "calcUnstakeRequestAmount(bytes,uint256)",
      )(scriptPubkey, amount, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async consortium(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("consortium()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async decimals(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("decimals()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async eip712Domain(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<
    [string, string, string, bigint, string, string, bigint[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: bigint;
      verifyingContract: string;
      salt: string;
      extensions: bigint[];
    }
  > {
    try {
      return await this.contract.getFunction("eip712Domain()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getBurnCommission(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getBurnCommission()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getDustFeeRate(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getDustFeeRate()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getMintFee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getMintFee()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getTreasury(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("getTreasury()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isClaimer(
    claimer: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isClaimer(address)")(
        claimer,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isMinter(
    minter: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isMinter(address)")(
        minter,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async name(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("name()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async nonces(
    owner: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("nonces(address)")(
        owner,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async operator(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("operator()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async owner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async paused(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("paused()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async pauser(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("pauser()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async pendingOwner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("pendingOwner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async symbol(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("symbol()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async totalSupply(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("totalSupply()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async acceptOwnership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("acceptOwnership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async addClaimer(
      newClaimer: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("addClaimer(address)")
          .staticCall(newClaimer, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async addMinter(
      newMinter: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("addMinter(address)")
          .staticCall(newMinter, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<boolean> {
      try {
        return await this.contract
          .getFunction("approve(address,uint256)")
          .staticCall(spender, value, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async batchMint_address_array_uint256_array(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("batchMint(address[],uint256[])")
          .staticCall(to, amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async batchMint_bytes_array_bytes_array(
      payload: BytesLike[],
      proof: BytesLike[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("batchMint(bytes[],bytes[])")
          .staticCall(payload, proof, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async batchMintWithFee(
      mintPayload: BytesLike[],
      proof: BytesLike[],
      feePayload: BytesLike[],
      userSignature: BytesLike[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("batchMintWithFee(bytes[],bytes[],bytes[],bytes[])")
          .staticCall(
            mintPayload,
            proof,
            feePayload,
            userSignature,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async burn_uint256(
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("burn(uint256)")
          .staticCall(amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async burn_address_uint256(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("burn(address,uint256)")
          .staticCall(from, amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeBascule(
      newVal: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeBascule(address)")
          .staticCall(newVal, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeBurnCommission(
      newValue: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeBurnCommission(uint64)")
          .staticCall(newValue, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeConsortium(
      newVal: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeConsortium(address)")
          .staticCall(newVal, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeDustFeeRate(
      newRate: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeDustFeeRate(uint256)")
          .staticCall(newRate, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeNameAndSymbol(
      name_: string,
      symbol_: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeNameAndSymbol(string,string)")
          .staticCall(name_, symbol_, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeTreasuryAddress(
      newValue: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeTreasuryAddress(address)")
          .staticCall(newValue, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async initialize(
      consortium_: string,
      burnCommission_: BigNumberish,
      treasury: string,
      owner_: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("initialize(address,uint64,address,address)")
          .staticCall(
            consortium_,
            burnCommission_,
            treasury,
            owner_,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async mint_address_uint256(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("mint(address,uint256)")
          .staticCall(to, amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async mint_bytes_bytes(
      payload: BytesLike,
      proof: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("mint(bytes,bytes)")
          .staticCall(payload, proof, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async mintWithFee(
      mintPayload: BytesLike,
      proof: BytesLike,
      feePayload: BytesLike,
      userSignature: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("mintWithFee(bytes,bytes,bytes,bytes)")
          .staticCall(
            mintPayload,
            proof,
            feePayload,
            userSignature,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async pause(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("pause()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          )
          .staticCall(
            owner,
            spender,
            value,
            deadline,
            v,
            r,
            s,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async redeem(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("redeem(bytes,uint256)")
          .staticCall(scriptPubkey, amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async reinitialize(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("reinitialize()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async removeClaimer(
      oldClaimer: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("removeClaimer(address)")
          .staticCall(oldClaimer, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async removeMinter(
      oldMinter: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("removeMinter(address)")
          .staticCall(oldMinter, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async renounceOwnership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("renounceOwnership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setMintFee(
      fee: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setMintFee(uint256)")
          .staticCall(fee, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async toggleWithdrawals(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("toggleWithdrawals()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<boolean> {
      try {
        return await this.contract
          .getFunction("transfer(address,uint256)")
          .staticCall(to, value, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<boolean> {
      try {
        return await this.contract
          .getFunction("transferFrom(address,address,uint256)")
          .staticCall(from, to, value, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferOperatorRole(
      newOperator: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("transferOperatorRole(address)")
          .staticCall(newOperator, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("transferOwnership(address)")
          .staticCall(newOwner, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferPauserRole(
      newPauser: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("transferPauserRole(address)")
          .staticCall(newPauser, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async unpause(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("unpause()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    Bascule(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "Bascule", "function Bascule()", []);
    },
    DOMAIN_SEPARATOR(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "DOMAIN_SEPARATOR",
        "function DOMAIN_SEPARATOR()",
        [],
      );
    },
    acceptOwnership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "acceptOwnership",
        "function acceptOwnership()",
        [],
      );
    },
    addClaimer(newClaimer: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "addClaimer",
        "function addClaimer(address)",
        [newClaimer],
      );
    },
    addMinter(newMinter: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "addMinter",
        "function addMinter(address)",
        [newMinter],
      );
    },
    allowance(
      owner: string,
      spender: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "allowance",
        "function allowance(address,address)",
        [owner, spender],
      );
    },
    approve(
      spender: string,
      value: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "approve",
        "function approve(address,uint256)",
        [spender, value],
      );
    },
    balanceOf(account: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "balanceOf",
        "function balanceOf(address)",
        [account],
      );
    },
    batchMint_address_array_uint256_array(
      to: string[],
      amount: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "batchMint",
        "function batchMint(address[],uint256[])",
        [to, amount],
      );
    },
    batchMint_bytes_array_bytes_array(
      payload: BytesLike[],
      proof: BytesLike[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "batchMint",
        "function batchMint(bytes[],bytes[])",
        [payload, proof],
      );
    },
    batchMintWithFee(
      mintPayload: BytesLike[],
      proof: BytesLike[],
      feePayload: BytesLike[],
      userSignature: BytesLike[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "batchMintWithFee",
        "function batchMintWithFee(bytes[],bytes[],bytes[],bytes[])",
        [mintPayload, proof, feePayload, userSignature],
      );
    },
    burn_uint256(
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(callContext, "burn", "function burn(uint256)", [
        amount,
      ]);
    },
    burn_address_uint256(
      from: string,
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "burn",
        "function burn(address,uint256)",
        [from, amount],
      );
    },
    calcUnstakeRequestAmount(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "calcUnstakeRequestAmount",
        "function calcUnstakeRequestAmount(bytes,uint256)",
        [scriptPubkey, amount],
      );
    },
    changeBascule(newVal: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "changeBascule",
        "function changeBascule(address)",
        [newVal],
      );
    },
    changeBurnCommission(
      newValue: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeBurnCommission",
        "function changeBurnCommission(uint64)",
        [newValue],
      );
    },
    changeConsortium(
      newVal: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeConsortium",
        "function changeConsortium(address)",
        [newVal],
      );
    },
    changeDustFeeRate(
      newRate: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeDustFeeRate",
        "function changeDustFeeRate(uint256)",
        [newRate],
      );
    },
    changeNameAndSymbol(
      name_: string,
      symbol_: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeNameAndSymbol",
        "function changeNameAndSymbol(string,string)",
        [name_, symbol_],
      );
    },
    changeTreasuryAddress(
      newValue: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeTreasuryAddress",
        "function changeTreasuryAddress(address)",
        [newValue],
      );
    },
    consortium(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "consortium",
        "function consortium()",
        [],
      );
    },
    decimals(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "decimals", "function decimals()", []);
    },
    eip712Domain(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "eip712Domain",
        "function eip712Domain()",
        [],
      );
    },
    getBurnCommission(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getBurnCommission",
        "function getBurnCommission()",
        [],
      );
    },
    getDustFeeRate(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getDustFeeRate",
        "function getDustFeeRate()",
        [],
      );
    },
    getMintFee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getMintFee",
        "function getMintFee()",
        [],
      );
    },
    getTreasury(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getTreasury",
        "function getTreasury()",
        [],
      );
    },
    initialize(
      consortium_: string,
      burnCommission_: BigNumberish,
      treasury: string,
      owner_: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "initialize",
        "function initialize(address,uint64,address,address)",
        [consortium_, burnCommission_, treasury, owner_],
      );
    },
    isClaimer(claimer: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "isClaimer",
        "function isClaimer(address)",
        [claimer],
      );
    },
    isMinter(minter: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "isMinter",
        "function isMinter(address)",
        [minter],
      );
    },
    mint_address_uint256(
      to: string,
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "mint",
        "function mint(address,uint256)",
        [to, amount],
      );
    },
    mint_bytes_bytes(
      payload: BytesLike,
      proof: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(callContext, "mint", "function mint(bytes,bytes)", [
        payload,
        proof,
      ]);
    },
    mintWithFee(
      mintPayload: BytesLike,
      proof: BytesLike,
      feePayload: BytesLike,
      userSignature: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "mintWithFee",
        "function mintWithFee(bytes,bytes,bytes,bytes)",
        [mintPayload, proof, feePayload, userSignature],
      );
    },
    name(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "name", "function name()", []);
    },
    nonces(owner: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "nonces", "function nonces(address)", [
        owner,
      ]);
    },
    operator(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "operator", "function operator()", []);
    },
    owner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "owner", "function owner()", []);
    },
    pause(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "pause", "function pause()", []);
    },
    paused(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "paused", "function paused()", []);
    },
    pauser(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "pauser", "function pauser()", []);
    },
    pendingOwner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "pendingOwner",
        "function pendingOwner()",
        [],
      );
    },
    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "permit",
        "function permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
        [owner, spender, value, deadline, v, r, s],
      );
    },
    redeem(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "redeem",
        "function redeem(bytes,uint256)",
        [scriptPubkey, amount],
      );
    },
    reinitialize(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "reinitialize",
        "function reinitialize()",
        [],
      );
    },
    removeClaimer(
      oldClaimer: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "removeClaimer",
        "function removeClaimer(address)",
        [oldClaimer],
      );
    },
    removeMinter(oldMinter: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "removeMinter",
        "function removeMinter(address)",
        [oldMinter],
      );
    },
    renounceOwnership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "renounceOwnership",
        "function renounceOwnership()",
        [],
      );
    },
    setMintFee(fee: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "setMintFee",
        "function setMintFee(uint256)",
        [fee],
      );
    },
    symbol(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "symbol", "function symbol()", []);
    },
    toggleWithdrawals(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "toggleWithdrawals",
        "function toggleWithdrawals()",
        [],
      );
    },
    totalSupply(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "totalSupply",
        "function totalSupply()",
        [],
      );
    },
    transfer(
      to: string,
      value: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transfer",
        "function transfer(address,uint256)",
        [to, value],
      );
    },
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferFrom",
        "function transferFrom(address,address,uint256)",
        [from, to, value],
      );
    },
    transferOperatorRole(
      newOperator: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferOperatorRole",
        "function transferOperatorRole(address)",
        [newOperator],
      );
    },
    transferOwnership(
      newOwner: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferOwnership",
        "function transferOwnership(address)",
        [newOwner],
      );
    },
    transferPauserRole(
      newPauser: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferPauserRole",
        "function transferPauserRole(address)",
        [newPauser],
      );
    },
    unpause(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "unpause", "function unpause()", []);
    },
  };
}

export class LBTCBoundContractView extends BoundContractView<
  LBTC,
  LBTCContractView
> {
  async Bascule(overrides?: Overrides): Promise<string> {
    return await this.view.Bascule(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async DOMAIN_SEPARATOR(overrides?: Overrides): Promise<string> {
    return await this.view.DOMAIN_SEPARATOR(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async allowance(
    owner: string,
    spender: string,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.allowance(
      owner,
      spender,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async balanceOf(account: string, overrides?: Overrides): Promise<bigint> {
    return await this.view.balanceOf(
      account,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async calcUnstakeRequestAmount(
    scriptPubkey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<
    [bigint, boolean] & { amountAfterFee: bigint; isAboveDust: boolean }
  > {
    return await this.view.calcUnstakeRequestAmount(
      scriptPubkey,
      amount,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async consortium(overrides?: Overrides): Promise<string> {
    return await this.view.consortium(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async decimals(overrides?: Overrides): Promise<bigint> {
    return await this.view.decimals(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async eip712Domain(
    overrides?: Overrides,
  ): Promise<
    [string, string, string, bigint, string, string, bigint[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: bigint;
      verifyingContract: string;
      salt: string;
      extensions: bigint[];
    }
  > {
    return await this.view.eip712Domain(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getBurnCommission(overrides?: Overrides): Promise<bigint> {
    return await this.view.getBurnCommission(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getDustFeeRate(overrides?: Overrides): Promise<bigint> {
    return await this.view.getDustFeeRate(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getMintFee(overrides?: Overrides): Promise<bigint> {
    return await this.view.getMintFee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getTreasury(overrides?: Overrides): Promise<string> {
    return await this.view.getTreasury(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isClaimer(claimer: string, overrides?: Overrides): Promise<boolean> {
    return await this.view.isClaimer(
      claimer,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isMinter(minter: string, overrides?: Overrides): Promise<boolean> {
    return await this.view.isMinter(
      minter,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async name(overrides?: Overrides): Promise<string> {
    return await this.view.name(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async nonces(owner: string, overrides?: Overrides): Promise<bigint> {
    return await this.view.nonces(
      owner,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async operator(overrides?: Overrides): Promise<string> {
    return await this.view.operator(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async owner(overrides?: Overrides): Promise<string> {
    return await this.view.owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async paused(overrides?: Overrides): Promise<boolean> {
    return await this.view.paused(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async pauser(overrides?: Overrides): Promise<string> {
    return await this.view.pauser(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async pendingOwner(overrides?: Overrides): Promise<string> {
    return await this.view.pendingOwner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async symbol(overrides?: Overrides): Promise<string> {
    return await this.view.symbol(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async totalSupply(overrides?: Overrides): Promise<bigint> {
    return await this.view.totalSupply(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async acceptOwnership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.acceptOwnership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async addClaimer(newClaimer: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.addClaimer(
        newClaimer,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async addMinter(newMinter: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.addMinter(
        newMinter,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<boolean> {
      return await this.view.callStatic.approve(
        spender,
        value,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async batchMint_address_array_uint256_array(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.batchMint_address_array_uint256_array(
        to,
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async batchMint_bytes_array_bytes_array(
      payload: BytesLike[],
      proof: BytesLike[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.batchMint_bytes_array_bytes_array(
        payload,
        proof,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async batchMintWithFee(
      mintPayload: BytesLike[],
      proof: BytesLike[],
      feePayload: BytesLike[],
      userSignature: BytesLike[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.batchMintWithFee(
        mintPayload,
        proof,
        feePayload,
        userSignature,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async burn_uint256(
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.burn_uint256(
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async burn_address_uint256(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.burn_address_uint256(
        from,
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeBascule(newVal: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.changeBascule(
        newVal,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeBurnCommission(
      newValue: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeBurnCommission(
        newValue,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeConsortium(
      newVal: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeConsortium(
        newVal,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeDustFeeRate(
      newRate: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeDustFeeRate(
        newRate,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeNameAndSymbol(
      name_: string,
      symbol_: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeNameAndSymbol(
        name_,
        symbol_,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeTreasuryAddress(
      newValue: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeTreasuryAddress(
        newValue,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async initialize(
      consortium_: string,
      burnCommission_: BigNumberish,
      treasury: string,
      owner_: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.initialize(
        consortium_,
        burnCommission_,
        treasury,
        owner_,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async mint_address_uint256(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.mint_address_uint256(
        to,
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async mint_bytes_bytes(
      payload: BytesLike,
      proof: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.mint_bytes_bytes(
        payload,
        proof,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async mintWithFee(
      mintPayload: BytesLike,
      proof: BytesLike,
      feePayload: BytesLike,
      userSignature: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.mintWithFee(
        mintPayload,
        proof,
        feePayload,
        userSignature,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async pause(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.pause(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.permit(
        owner,
        spender,
        value,
        deadline,
        v,
        r,
        s,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async redeem(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.redeem(
        scriptPubkey,
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async reinitialize(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.reinitialize(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async removeClaimer(
      oldClaimer: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.removeClaimer(
        oldClaimer,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async removeMinter(
      oldMinter: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.removeMinter(
        oldMinter,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async renounceOwnership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.renounceOwnership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setMintFee(fee: BigNumberish, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.setMintFee(
        fee,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async toggleWithdrawals(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.toggleWithdrawals(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<boolean> {
      return await this.view.callStatic.transfer(
        to,
        value,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): Promise<boolean> {
      return await this.view.callStatic.transferFrom(
        from,
        to,
        value,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferOperatorRole(
      newOperator: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transferOperatorRole(
        newOperator,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transferOwnership(
        newOwner,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferPauserRole(
      newPauser: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transferPauserRole(
        newPauser,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async unpause(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.unpause(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    Bascule(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.Bascule({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    DOMAIN_SEPARATOR(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.DOMAIN_SEPARATOR({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    acceptOwnership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.acceptOwnership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    addClaimer(newClaimer: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.addClaimer(newClaimer, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    addMinter(newMinter: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.addMinter(newMinter, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    allowance(
      owner: string,
      spender: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.allowance(owner, spender, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.approve(spender, value, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    balanceOf(account: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.balanceOf(account, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    batchMint_address_array_uint256_array(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.batchMint_address_array_uint256_array(
        to,
        amount,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    batchMint_bytes_array_bytes_array(
      payload: BytesLike[],
      proof: BytesLike[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.batchMint_bytes_array_bytes_array(
        payload,
        proof,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    batchMintWithFee(
      mintPayload: BytesLike[],
      proof: BytesLike[],
      feePayload: BytesLike[],
      userSignature: BytesLike[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.batchMintWithFee(
        mintPayload,
        proof,
        feePayload,
        userSignature,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    burn_uint256(amount: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.burn_uint256(amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    burn_address_uint256(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.burn_address_uint256(from, amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    calcUnstakeRequestAmount(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.calcUnstakeRequestAmount(
        scriptPubkey,
        amount,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    changeBascule(newVal: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.changeBascule(newVal, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeBurnCommission(
      newValue: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.changeBurnCommission(newValue, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeConsortium(newVal: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.changeConsortium(newVal, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeDustFeeRate(
      newRate: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.changeDustFeeRate(newRate, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeNameAndSymbol(
      name_: string,
      symbol_: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.changeNameAndSymbol(name_, symbol_, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeTreasuryAddress(
      newValue: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.changeTreasuryAddress(newValue, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    consortium(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.consortium({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    decimals(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.decimals({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    eip712Domain(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.eip712Domain({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getBurnCommission(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getBurnCommission({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getDustFeeRate(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getDustFeeRate({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getMintFee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getMintFee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getTreasury(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getTreasury({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    initialize(
      consortium_: string,
      burnCommission_: BigNumberish,
      treasury: string,
      owner_: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.initialize(
        consortium_,
        burnCommission_,
        treasury,
        owner_,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    isClaimer(claimer: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.isClaimer(claimer, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isMinter(minter: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.isMinter(minter, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    mint_address_uint256(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.mint_address_uint256(to, amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    mint_bytes_bytes(
      payload: BytesLike,
      proof: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.mint_bytes_bytes(payload, proof, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    mintWithFee(
      mintPayload: BytesLike,
      proof: BytesLike,
      feePayload: BytesLike,
      userSignature: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.mintWithFee(
        mintPayload,
        proof,
        feePayload,
        userSignature,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    name(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.name({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    nonces(owner: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.nonces(owner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    operator(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.operator({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    owner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    pause(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.pause({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    paused(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.paused({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    pauser(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.pauser({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    pendingOwner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.pendingOwner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.permit(
        owner,
        spender,
        value,
        deadline,
        v,
        r,
        s,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    redeem(
      scriptPubkey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.redeem(scriptPubkey, amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    reinitialize(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.reinitialize({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    removeClaimer(oldClaimer: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.removeClaimer(oldClaimer, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    removeMinter(oldMinter: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.removeMinter(oldMinter, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    renounceOwnership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.renounceOwnership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setMintFee(fee: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.setMintFee(fee, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    symbol(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.symbol({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    toggleWithdrawals(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.toggleWithdrawals({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    totalSupply(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.totalSupply({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.transfer(to, value, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.transferFrom(from, to, value, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferOperatorRole(
      newOperator: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.transferOperatorRole(newOperator, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferOwnership(newOwner: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.transferOwnership(newOwner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferPauserRole(newPauser: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.transferPauserRole(newPauser, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    unpause(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.unpause({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type LBTCContext = ContractContext<LBTC, LBTCBoundContractView>;

export class LBTCProcessor extends BaseProcessor<LBTC, LBTCBoundContractView> {
  onEventApproval(
    handler: (event: ApprovalEvent, ctx: LBTCContext) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ApprovalEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Approval(address,address,uint256)"](
        null,
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBasculeChanged(
    handler: (event: BasculeChangedEvent, ctx: LBTCContext) => void,
    filter?: BasculeChangedEventFilter | BasculeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BasculeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BasculeChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBatchMintSkipped(
    handler: (event: BatchMintSkippedEvent, ctx: LBTCContext) => void,
    filter?: BatchMintSkippedEventFilter | BatchMintSkippedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BatchMintSkippedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BatchMintSkipped(bytes32,bytes)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBridgeChanged(
    handler: (event: BridgeChangedEvent, ctx: LBTCContext) => void,
    filter?: BridgeChangedEventFilter | BridgeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BridgeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BridgeChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBurnCommissionChanged(
    handler: (event: BurnCommissionChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | BurnCommissionChangedEventFilter
      | BurnCommissionChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BurnCommissionChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BurnCommissionChanged(uint64,uint64)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventClaimerUpdated(
    handler: (event: ClaimerUpdatedEvent, ctx: LBTCContext) => void,
    filter?: ClaimerUpdatedEventFilter | ClaimerUpdatedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ClaimerUpdatedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ClaimerUpdated(address,bool)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventConsortiumChanged(
    handler: (event: ConsortiumChangedEvent, ctx: LBTCContext) => void,
    filter?: ConsortiumChangedEventFilter | ConsortiumChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ConsortiumChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ConsortiumChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventDustFeeRateChanged(
    handler: (event: DustFeeRateChangedEvent, ctx: LBTCContext) => void,
    filter?: DustFeeRateChangedEventFilter | DustFeeRateChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: DustFeeRateChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["DustFeeRateChanged(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventEIP712DomainChanged(
    handler: (event: EIP712DomainChangedEvent, ctx: LBTCContext) => void,
    filter?: EIP712DomainChangedEventFilter | EIP712DomainChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: EIP712DomainChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["EIP712DomainChanged()"]();
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeChanged(
    handler: (event: FeeChangedEvent, ctx: LBTCContext) => void,
    filter?: FeeChangedEventFilter | FeeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeChanged(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeCharged(
    handler: (event: FeeChargedEvent, ctx: LBTCContext) => void,
    filter?: FeeChargedEventFilter | FeeChargedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeChargedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeCharged(uint256,bytes)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventInitialized(
    handler: (event: InitializedEvent, ctx: LBTCContext) => void,
    filter?: InitializedEventFilter | InitializedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: InitializedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Initialized(uint64)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMintProofConsumed(
    handler: (event: MintProofConsumedEvent, ctx: LBTCContext) => void,
    filter?: MintProofConsumedEventFilter | MintProofConsumedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MintProofConsumedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "MintProofConsumed(address,bytes32,bytes)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMinterUpdated(
    handler: (event: MinterUpdatedEvent, ctx: LBTCContext) => void,
    filter?: MinterUpdatedEventFilter | MinterUpdatedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MinterUpdatedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MinterUpdated(address,bool)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNameAndSymbolChanged(
    handler: (event: NameAndSymbolChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | NameAndSymbolChangedEventFilter
      | NameAndSymbolChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NameAndSymbolChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NameAndSymbolChanged(string,string)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOperatorRoleTransferred(
    handler: (event: OperatorRoleTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | OperatorRoleTransferredEventFilter
      | OperatorRoleTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OperatorRoleTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OperatorRoleTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferStarted(
    handler: (event: OwnershipTransferStartedEvent, ctx: LBTCContext) => void,
    filter?:
      | OwnershipTransferStartedEventFilter
      | OwnershipTransferStartedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferStartedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferStarted(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPaused(
    handler: (event: PausedEvent, ctx: LBTCContext) => void,
    filter?: PausedEventFilter | PausedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PausedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Paused(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPauserRoleTransferred(
    handler: (event: PauserRoleTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | PauserRoleTransferredEventFilter
      | PauserRoleTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PauserRoleTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "PauserRoleTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventTransfer(
    handler: (event: TransferEvent, ctx: LBTCContext) => void,
    filter?: TransferEventFilter | TransferEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TransferEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventTreasuryAddressChanged(
    handler: (event: TreasuryAddressChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | TreasuryAddressChangedEventFilter
      | TreasuryAddressChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TreasuryAddressChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "TreasuryAddressChanged(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUnpaused(
    handler: (event: UnpausedEvent, ctx: LBTCContext) => void,
    filter?: UnpausedEventFilter | UnpausedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UnpausedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Unpaused(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUnstakeRequest(
    handler: (event: UnstakeRequestEvent, ctx: LBTCContext) => void,
    filter?: UnstakeRequestEventFilter | UnstakeRequestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UnstakeRequestEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "UnstakeRequest(address,bytes,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventWithdrawalsEnabled(
    handler: (event: WithdrawalsEnabledEvent, ctx: LBTCContext) => void,
    filter?: WithdrawalsEnabledEventFilter | WithdrawalsEnabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: WithdrawalsEnabledEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["WithdrawalsEnabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCallBascule(
    handler: (call: BasculeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BasculeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd6a02b6a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDOMAIN_SEPARATOR(
    handler: (call: DOMAIN_SEPARATORCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: DOMAIN_SEPARATORCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3644e515",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAcceptOwnership(
    handler: (call: AcceptOwnershipCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AcceptOwnershipCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x79ba5097",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAddClaimer(
    handler: (call: AddClaimerCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AddClaimerCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x2ea66401",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAddMinter(
    handler: (call: AddMinterCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AddMinterCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x983b2d56",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAllowance(
    handler: (call: AllowanceCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AllowanceCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xdd62ed3e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallApprove(
    handler: (call: ApproveCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ApproveCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x095ea7b3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBalanceOf(
    handler: (call: BalanceOfCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BalanceOfCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x70a08231",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBatchMint_address_array_uint256_array(
    handler: (
      call: BatchMint_address_array_uint256_arrayCallTrace,
      ctx: LBTCContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BatchMint_address_array_uint256_arrayCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x68573107",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBatchMint_bytes_array_bytes_array(
    handler: (
      call: BatchMint_bytes_array_bytes_arrayCallTrace,
      ctx: LBTCContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BatchMint_bytes_array_bytes_arrayCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9b914470",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBatchMintWithFee(
    handler: (call: BatchMintWithFeeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BatchMintWithFeeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x59aae4ba",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBurn_uint256(
    handler: (call: Burn_uint256CallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Burn_uint256CallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x42966c68",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBurn_address_uint256(
    handler: (call: Burn_address_uint256CallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Burn_address_uint256CallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9dc29fac",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCalcUnstakeRequestAmount(
    handler: (
      call: CalcUnstakeRequestAmountCallTrace,
      ctx: LBTCContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CalcUnstakeRequestAmountCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x80e787df",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeBascule(
    handler: (call: ChangeBasculeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeBasculeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7f56945e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeBurnCommission(
    handler: (call: ChangeBurnCommissionCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeBurnCommissionCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe3248f9a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeConsortium(
    handler: (call: ChangeConsortiumCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeConsortiumCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x56712139",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeDustFeeRate(
    handler: (call: ChangeDustFeeRateCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeDustFeeRateCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x01d40387",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeNameAndSymbol(
    handler: (call: ChangeNameAndSymbolCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeNameAndSymbolCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x089bb99a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeTreasuryAddress(
    handler: (call: ChangeTreasuryAddressCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeTreasuryAddressCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa6f353f0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallConsortium(
    handler: (call: ConsortiumCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ConsortiumCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9ad18765",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDecimals(
    handler: (call: DecimalsCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: DecimalsCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x313ce567",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEip712Domain(
    handler: (call: Eip712DomainCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Eip712DomainCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x84b0196e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetBurnCommission(
    handler: (call: GetBurnCommissionCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetBurnCommissionCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf216acfb",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetDustFeeRate(
    handler: (call: GetDustFeeRateCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetDustFeeRateCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x1721c6bc",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetMintFee(
    handler: (call: GetMintFeeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetMintFeeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7a5caab3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetTreasury(
    handler: (call: GetTreasuryCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetTreasuryCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3b19e84a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallInitialize(
    handler: (call: InitializeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: InitializeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6294c311",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsClaimer(
    handler: (call: IsClaimerCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsClaimerCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x10a8aecd",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsMinter(
    handler: (call: IsMinterCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsMinterCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xaa271e1a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallMint_address_uint256(
    handler: (call: Mint_address_uint256CallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Mint_address_uint256CallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x40c10f19",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallMint_bytes_bytes(
    handler: (call: Mint_bytes_bytesCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Mint_bytes_bytesCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6bc63893",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallMintWithFee(
    handler: (call: MintWithFeeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: MintWithFeeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x06689495",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallName(
    handler: (call: NameCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: NameCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x06fdde03",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallNonces(
    handler: (call: NoncesCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: NoncesCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7ecebe00",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOperator(
    handler: (call: OperatorCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OperatorCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x570ca735",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OwnerCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8da5cb5b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPause(
    handler: (call: PauseCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PauseCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8456cb59",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPaused(
    handler: (call: PausedCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PausedCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5c975abb",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPauser(
    handler: (call: PauserCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PauserCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9fd0506d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPendingOwner(
    handler: (call: PendingOwnerCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PendingOwnerCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe30c3978",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPermit(
    handler: (call: PermitCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PermitCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd505accf",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRedeem(
    handler: (call: RedeemCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RedeemCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa3622bf0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallReinitialize(
    handler: (call: ReinitializeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ReinitializeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6c2eb350",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemoveClaimer(
    handler: (call: RemoveClaimerCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RemoveClaimerCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf0490b8a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemoveMinter(
    handler: (call: RemoveMinterCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RemoveMinterCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3092afd5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRenounceOwnership(
    handler: (call: RenounceOwnershipCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RenounceOwnershipCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x715018a6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetMintFee(
    handler: (call: SetMintFeeCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetMintFeeCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xeddd0d9c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSymbol(
    handler: (call: SymbolCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SymbolCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x95d89b41",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallToggleWithdrawals(
    handler: (call: ToggleWithdrawalsCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ToggleWithdrawalsCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd239f003",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTotalSupply(
    handler: (call: TotalSupplyCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TotalSupplyCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x18160ddd",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransfer(
    handler: (call: TransferCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa9059cbb",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferFrom(
    handler: (call: TransferFromCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferFromCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x23b872dd",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferOperatorRole(
    handler: (call: TransferOperatorRoleCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferOperatorRoleCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0d121337",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferOwnership(
    handler: (call: TransferOwnershipCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferOwnershipCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf2fde38b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferPauserRole(
    handler: (call: TransferPauserRoleCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferPauserRoleCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xbad383a6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUnpause(
    handler: (call: UnpauseCallTrace, ctx: LBTCContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UnpauseCallTrace,
      ctx: LBTCContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3f4ba83a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter {
      return templateContract.filters["Approval(address,address,uint256)"](
        owner,
        spender,
        value,
      );
    },
    BasculeChanged(
      prevVal?: string | null,
      newVal?: string | null,
    ): BasculeChangedEventFilter {
      return templateContract.filters["BasculeChanged(address,address)"](
        prevVal,
        newVal,
      );
    },
    BatchMintSkipped(
      payloadHash?: BytesLike | null,
      payload?: null,
    ): BatchMintSkippedEventFilter {
      return templateContract.filters["BatchMintSkipped(bytes32,bytes)"](
        payloadHash,
        payload,
      );
    },
    BridgeChanged(
      prevVal?: string | null,
      newVal?: string | null,
    ): BridgeChangedEventFilter {
      return templateContract.filters["BridgeChanged(address,address)"](
        prevVal,
        newVal,
      );
    },
    BurnCommissionChanged(
      prevValue?: BigNumberish | null,
      newValue?: BigNumberish | null,
    ): BurnCommissionChangedEventFilter {
      return templateContract.filters["BurnCommissionChanged(uint64,uint64)"](
        prevValue,
        newValue,
      );
    },
    ClaimerUpdated(
      claimer?: string | null,
      isClaimer?: null,
    ): ClaimerUpdatedEventFilter {
      return templateContract.filters["ClaimerUpdated(address,bool)"](
        claimer,
        isClaimer,
      );
    },
    ConsortiumChanged(
      prevVal?: string | null,
      newVal?: string | null,
    ): ConsortiumChangedEventFilter {
      return templateContract.filters["ConsortiumChanged(address,address)"](
        prevVal,
        newVal,
      );
    },
    DustFeeRateChanged(
      oldRate?: BigNumberish | null,
      newRate?: BigNumberish | null,
    ): DustFeeRateChangedEventFilter {
      return templateContract.filters["DustFeeRateChanged(uint256,uint256)"](
        oldRate,
        newRate,
      );
    },
    EIP712DomainChanged(): EIP712DomainChangedEventFilter {
      return templateContract.filters["EIP712DomainChanged()"]();
    },
    FeeChanged(
      oldFee?: BigNumberish | null,
      newFee?: BigNumberish | null,
    ): FeeChangedEventFilter {
      return templateContract.filters["FeeChanged(uint256,uint256)"](
        oldFee,
        newFee,
      );
    },
    FeeCharged(
      fee?: BigNumberish | null,
      userSignature?: null,
    ): FeeChargedEventFilter {
      return templateContract.filters["FeeCharged(uint256,bytes)"](
        fee,
        userSignature,
      );
    },
    Initialized(version?: null): InitializedEventFilter {
      return templateContract.filters["Initialized(uint64)"](version);
    },
    MintProofConsumed(
      recipient?: string | null,
      payloadHash?: BytesLike | null,
      payload?: null,
    ): MintProofConsumedEventFilter {
      return templateContract.filters[
        "MintProofConsumed(address,bytes32,bytes)"
      ](recipient, payloadHash, payload);
    },
    MinterUpdated(
      minter?: string | null,
      isMinter?: null,
    ): MinterUpdatedEventFilter {
      return templateContract.filters["MinterUpdated(address,bool)"](
        minter,
        isMinter,
      );
    },
    NameAndSymbolChanged(
      name?: null,
      symbol?: null,
    ): NameAndSymbolChangedEventFilter {
      return templateContract.filters["NameAndSymbolChanged(string,string)"](
        name,
        symbol,
      );
    },
    OperatorRoleTransferred(
      previousOperator?: string | null,
      newOperator?: string | null,
    ): OperatorRoleTransferredEventFilter {
      return templateContract.filters[
        "OperatorRoleTransferred(address,address)"
      ](previousOperator, newOperator);
    },
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter {
      return templateContract.filters[
        "OwnershipTransferStarted(address,address)"
      ](previousOwner, newOwner);
    },
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner,
      );
    },
    Paused(account?: null): PausedEventFilter {
      return templateContract.filters["Paused(address)"](account);
    },
    PauserRoleTransferred(
      previousPauser?: string | null,
      newPauser?: string | null,
    ): PauserRoleTransferredEventFilter {
      return templateContract.filters["PauserRoleTransferred(address,address)"](
        previousPauser,
        newPauser,
      );
    },
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter {
      return templateContract.filters["Transfer(address,address,uint256)"](
        from,
        to,
        value,
      );
    },
    TreasuryAddressChanged(
      prevValue?: string | null,
      newValue?: string | null,
    ): TreasuryAddressChangedEventFilter {
      return templateContract.filters[
        "TreasuryAddressChanged(address,address)"
      ](prevValue, newValue);
    },
    Unpaused(account?: null): UnpausedEventFilter {
      return templateContract.filters["Unpaused(address)"](account);
    },
    UnstakeRequest(
      fromAddress?: string | null,
      scriptPubKey?: null,
      amount?: null,
    ): UnstakeRequestEventFilter {
      return templateContract.filters["UnstakeRequest(address,bytes,uint256)"](
        fromAddress,
        scriptPubKey,
        amount,
      );
    },
    WithdrawalsEnabled(arg0?: null): WithdrawalsEnabledEventFilter {
      return templateContract.filters["WithdrawalsEnabled(bool)"](arg0);
    },
  };

  protected CreateBoundContractView(): LBTCBoundContractView {
    const view = getLBTCContract(this.config.network, this.config.address);
    return new LBTCBoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): LBTCProcessor {
    if (!options.name) {
      options.name = "LBTC";
    }
    let processor = getProcessor(options) as LBTCProcessor;
    if (!processor) {
      processor = new LBTCProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class LBTCProcessorTemplate extends BaseProcessorTemplate<
  LBTC,
  LBTCBoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "LBTC";
    }
    let processor = getProcessor(options) as LBTCProcessor;
    if (!processor) {
      processor = new LBTCProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventApproval(
    handler: (event: ApprovalEvent, ctx: LBTCContext) => void,
    filter?: ApprovalEventFilter | ApprovalEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ApprovalEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Approval(address,address,uint256)"](
        null,
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBasculeChanged(
    handler: (event: BasculeChangedEvent, ctx: LBTCContext) => void,
    filter?: BasculeChangedEventFilter | BasculeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BasculeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BasculeChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBatchMintSkipped(
    handler: (event: BatchMintSkippedEvent, ctx: LBTCContext) => void,
    filter?: BatchMintSkippedEventFilter | BatchMintSkippedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BatchMintSkippedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BatchMintSkipped(bytes32,bytes)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBridgeChanged(
    handler: (event: BridgeChangedEvent, ctx: LBTCContext) => void,
    filter?: BridgeChangedEventFilter | BridgeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BridgeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BridgeChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBurnCommissionChanged(
    handler: (event: BurnCommissionChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | BurnCommissionChangedEventFilter
      | BurnCommissionChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BurnCommissionChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BurnCommissionChanged(uint64,uint64)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventClaimerUpdated(
    handler: (event: ClaimerUpdatedEvent, ctx: LBTCContext) => void,
    filter?: ClaimerUpdatedEventFilter | ClaimerUpdatedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ClaimerUpdatedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ClaimerUpdated(address,bool)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventConsortiumChanged(
    handler: (event: ConsortiumChangedEvent, ctx: LBTCContext) => void,
    filter?: ConsortiumChangedEventFilter | ConsortiumChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ConsortiumChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ConsortiumChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventDustFeeRateChanged(
    handler: (event: DustFeeRateChangedEvent, ctx: LBTCContext) => void,
    filter?: DustFeeRateChangedEventFilter | DustFeeRateChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: DustFeeRateChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["DustFeeRateChanged(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventEIP712DomainChanged(
    handler: (event: EIP712DomainChangedEvent, ctx: LBTCContext) => void,
    filter?: EIP712DomainChangedEventFilter | EIP712DomainChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: EIP712DomainChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["EIP712DomainChanged()"]();
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeChanged(
    handler: (event: FeeChangedEvent, ctx: LBTCContext) => void,
    filter?: FeeChangedEventFilter | FeeChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeChanged(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeCharged(
    handler: (event: FeeChargedEvent, ctx: LBTCContext) => void,
    filter?: FeeChargedEventFilter | FeeChargedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeChargedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeCharged(uint256,bytes)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventInitialized(
    handler: (event: InitializedEvent, ctx: LBTCContext) => void,
    filter?: InitializedEventFilter | InitializedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: InitializedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Initialized(uint64)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMintProofConsumed(
    handler: (event: MintProofConsumedEvent, ctx: LBTCContext) => void,
    filter?: MintProofConsumedEventFilter | MintProofConsumedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MintProofConsumedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "MintProofConsumed(address,bytes32,bytes)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMinterUpdated(
    handler: (event: MinterUpdatedEvent, ctx: LBTCContext) => void,
    filter?: MinterUpdatedEventFilter | MinterUpdatedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MinterUpdatedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MinterUpdated(address,bool)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNameAndSymbolChanged(
    handler: (event: NameAndSymbolChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | NameAndSymbolChangedEventFilter
      | NameAndSymbolChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NameAndSymbolChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NameAndSymbolChanged(string,string)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOperatorRoleTransferred(
    handler: (event: OperatorRoleTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | OperatorRoleTransferredEventFilter
      | OperatorRoleTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OperatorRoleTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OperatorRoleTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferStarted(
    handler: (event: OwnershipTransferStartedEvent, ctx: LBTCContext) => void,
    filter?:
      | OwnershipTransferStartedEventFilter
      | OwnershipTransferStartedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferStartedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferStarted(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPaused(
    handler: (event: PausedEvent, ctx: LBTCContext) => void,
    filter?: PausedEventFilter | PausedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PausedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Paused(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPauserRoleTransferred(
    handler: (event: PauserRoleTransferredEvent, ctx: LBTCContext) => void,
    filter?:
      | PauserRoleTransferredEventFilter
      | PauserRoleTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PauserRoleTransferredEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "PauserRoleTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventTransfer(
    handler: (event: TransferEvent, ctx: LBTCContext) => void,
    filter?: TransferEventFilter | TransferEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TransferEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Transfer(address,address,uint256)"](
        null,
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventTreasuryAddressChanged(
    handler: (event: TreasuryAddressChangedEvent, ctx: LBTCContext) => void,
    filter?:
      | TreasuryAddressChangedEventFilter
      | TreasuryAddressChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TreasuryAddressChangedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "TreasuryAddressChanged(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUnpaused(
    handler: (event: UnpausedEvent, ctx: LBTCContext) => void,
    filter?: UnpausedEventFilter | UnpausedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UnpausedEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Unpaused(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUnstakeRequest(
    handler: (event: UnstakeRequestEvent, ctx: LBTCContext) => void,
    filter?: UnstakeRequestEventFilter | UnstakeRequestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UnstakeRequestEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "UnstakeRequest(address,bytes,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventWithdrawalsEnabled(
    handler: (event: WithdrawalsEnabledEvent, ctx: LBTCContext) => void,
    filter?: WithdrawalsEnabledEventFilter | WithdrawalsEnabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: WithdrawalsEnabledEvent,
      ctx: LBTCContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["WithdrawalsEnabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getLBTCContract(
  chainId: EthChainId,
  address: string,
): LBTCContractView {
  let contract = getContractByABI("LBTC", address, chainId) as LBTCContractView;
  if (!contract) {
    const rawContract = LBTC__factory.connect(address, getProvider(chainId));
    contract = new LBTCContractView(rawContract);
    addContractByABI("LBTC", address, chainId, contract);
  }
  return contract;
}

export function getLBTCContractOnContext(
  context: EthContext,
  address: string,
): LBTCBoundContractView {
  const view = getLBTCContract(context.getChainId(), address);
  const boundView = new LBTCBoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
