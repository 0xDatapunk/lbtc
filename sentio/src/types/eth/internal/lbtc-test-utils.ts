/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { LogParams } from "ethers/providers";
import { EthChainId } from "@sentio/sdk/eth";
import {
  ApprovalEventObject,
  BasculeChangedEventObject,
  BatchMintSkippedEventObject,
  BridgeChangedEventObject,
  BurnCommissionChangedEventObject,
  ClaimerUpdatedEventObject,
  ConsortiumChangedEventObject,
  DustFeeRateChangedEventObject,
  EIP712DomainChangedEventObject,
  FeeChangedEventObject,
  FeeChargedEventObject,
  InitializedEventObject,
  MintProofConsumedEventObject,
  MinterUpdatedEventObject,
  NameAndSymbolChangedEventObject,
  OperatorRoleTransferredEventObject,
  OwnershipTransferStartedEventObject,
  OwnershipTransferredEventObject,
  PausedEventObject,
  PauserRoleTransferredEventObject,
  TransferEventObject,
  TreasuryAddressChangedEventObject,
  UnpausedEventObject,
  UnstakeRequestEventObject,
  WithdrawalsEnabledEventObject,
} from "./LBTC.js";
import { getLBTCContract } from "./lbtc-processor.js";
const mockField = {
  blockHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  blockNumber: 0,
  logIndex: 0,
  removed: false,
  transactionHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  transactionIndex: 0,
};

export function mockApprovalLog(
  contractAddress: string,
  event: ApprovalEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Approval(address,address,uint256)",
    [event.owner, event.spender, event.value],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockBasculeChangedLog(
  contractAddress: string,
  event: BasculeChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "BasculeChanged(address,address)",
    [event.prevVal, event.newVal],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockBatchMintSkippedLog(
  contractAddress: string,
  event: BatchMintSkippedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "BatchMintSkipped(bytes32,bytes)",
    [event.payloadHash, event.payload],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockBridgeChangedLog(
  contractAddress: string,
  event: BridgeChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "BridgeChanged(address,address)",
    [event.prevVal, event.newVal],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockBurnCommissionChangedLog(
  contractAddress: string,
  event: BurnCommissionChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "BurnCommissionChanged(uint64,uint64)",
    [event.prevValue, event.newValue],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockClaimerUpdatedLog(
  contractAddress: string,
  event: ClaimerUpdatedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "ClaimerUpdated(address,bool)",
    [event.claimer, event.isClaimer],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockConsortiumChangedLog(
  contractAddress: string,
  event: ConsortiumChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "ConsortiumChanged(address,address)",
    [event.prevVal, event.newVal],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockDustFeeRateChangedLog(
  contractAddress: string,
  event: DustFeeRateChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "DustFeeRateChanged(uint256,uint256)",
    [event.oldRate, event.newRate],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockEIP712DomainChangedLog(
  contractAddress: string,
  event: EIP712DomainChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "EIP712DomainChanged()",
    [],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockFeeChangedLog(
  contractAddress: string,
  event: FeeChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "FeeChanged(uint256,uint256)",
    [event.oldFee, event.newFee],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockFeeChargedLog(
  contractAddress: string,
  event: FeeChargedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "FeeCharged(uint256,bytes)",
    [event.fee, event.userSignature],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockInitializedLog(
  contractAddress: string,
  event: InitializedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Initialized(uint64)",
    [event.version],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockMintProofConsumedLog(
  contractAddress: string,
  event: MintProofConsumedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "MintProofConsumed(address,bytes32,bytes)",
    [event.recipient, event.payloadHash, event.payload],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockMinterUpdatedLog(
  contractAddress: string,
  event: MinterUpdatedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "MinterUpdated(address,bool)",
    [event.minter, event.isMinter],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockNameAndSymbolChangedLog(
  contractAddress: string,
  event: NameAndSymbolChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "NameAndSymbolChanged(string,string)",
    [event.name, event.symbol],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockOperatorRoleTransferredLog(
  contractAddress: string,
  event: OperatorRoleTransferredEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "OperatorRoleTransferred(address,address)",
    [event.previousOperator, event.newOperator],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockOwnershipTransferStartedLog(
  contractAddress: string,
  event: OwnershipTransferStartedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "OwnershipTransferStarted(address,address)",
    [event.previousOwner, event.newOwner],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockOwnershipTransferredLog(
  contractAddress: string,
  event: OwnershipTransferredEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "OwnershipTransferred(address,address)",
    [event.previousOwner, event.newOwner],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockPausedLog(
  contractAddress: string,
  event: PausedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Paused(address)",
    [event.account],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockPauserRoleTransferredLog(
  contractAddress: string,
  event: PauserRoleTransferredEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "PauserRoleTransferred(address,address)",
    [event.previousPauser, event.newPauser],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockTransferLog(
  contractAddress: string,
  event: TransferEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Transfer(address,address,uint256)",
    [event.from, event.to, event.value],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockTreasuryAddressChangedLog(
  contractAddress: string,
  event: TreasuryAddressChangedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "TreasuryAddressChanged(address,address)",
    [event.prevValue, event.newValue],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockUnpausedLog(
  contractAddress: string,
  event: UnpausedEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Unpaused(address)",
    [event.account],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockUnstakeRequestLog(
  contractAddress: string,
  event: UnstakeRequestEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "UnstakeRequest(address,bytes,uint256)",
    [event.fromAddress, event.scriptPubKey, event.amount],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockWithdrawalsEnabledLog(
  contractAddress: string,
  event: WithdrawalsEnabledEventObject,
): LogParams {
  const contract = getLBTCContract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "WithdrawalsEnabled(bool)",
    [event.arg0],
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}
