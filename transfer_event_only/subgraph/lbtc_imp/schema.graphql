type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BasculeChanged @entity(immutable: true) {
  id: Bytes!
  prevVal: Bytes! # address
  newVal: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMintSkipped @entity(immutable: true) {
  id: Bytes!
  payloadHash: Bytes! # bytes32
  payload: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BridgeChanged @entity(immutable: true) {
  id: Bytes!
  prevVal: Bytes! # address
  newVal: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BurnCommissionChanged @entity(immutable: true) {
  id: Bytes!
  prevValue: BigInt! # uint64
  newValue: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimerUpdated @entity(immutable: true) {
  id: Bytes!
  claimer: Bytes! # address
  isClaimer: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConsortiumChanged @entity(immutable: true) {
  id: Bytes!
  prevVal: Bytes! # address
  newVal: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DustFeeRateChanged @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeChanged @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt! # uint256
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeCharged @entity(immutable: true) {
  id: Bytes!
  fee: BigInt! # uint256
  userSignature: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintProofConsumed @entity(immutable: true) {
  id: Bytes!
  recipient: Bytes! # address
  payloadHash: Bytes! # bytes32
  payload: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterUpdated @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  isMinter: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NameAndSymbolChanged @entity(immutable: true) {
  id: Bytes!
  name: String! # string
  symbol: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorRoleTransferred @entity(immutable: true) {
  id: Bytes!
  previousOperator: Bytes! # address
  newOperator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PauserRoleTransferred @entity(immutable: true) {
  id: Bytes!
  previousPauser: Bytes! # address
  newPauser: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryAddressChanged @entity(immutable: true) {
  id: Bytes!
  prevValue: Bytes! # address
  newValue: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnstakeRequest @entity(immutable: true) {
  id: Bytes!
  fromAddress: Bytes! # address
  scriptPubKey: Bytes! # bytes
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalsEnabled @entity(immutable: true) {
  id: Bytes!
  param0: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
